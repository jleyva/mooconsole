#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.2 on Sat Apr 17 13:39:40 2010

import wx

# begin wxGlade: extracode
# end wxGlade

import wx.grid as gridlib

import wx.html
import wx.grid

import sqlite3
import sys
from mencrypt import *
from mlib import *
from mconfig import *
from mwslib import *
from urllib import urlencode
import time
import webbrowser
import murlmonitor
import threading
import csv
import codecs
import mbrowser
import minfogatherer
import re
import logging
import logging.handlers
import string
from time import sleep, strftime, localtime

class MoodleBrowserDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MoodleBrowserDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE|wx.RESIZE_BORDER|wx.MAXIMIZE_BOX|wx.THICK_FRAME
        wx.Dialog.__init__(self, *args, **kwds)
        self.sizer_27_staticbox = wx.StaticBox(self, -1, "Site")
        self.label_notice = wx.StaticText(self, -1, "label_15")
        self.tree_ctrl_browser = wx.TreeCtrl(self, -1, style=wx.TR_HAS_BUTTONS|wx.TR_LINES_AT_ROOT|wx.TR_DEFAULT_STYLE|wx.SUNKEN_BORDER)
        self.button_create_folder = wx.Button(self, -1, "Create folder")
        self.button_select = wx.Button(self, -1, "Select")
        self.button_cancel_copy = wx.Button(self, wx.ID_CANCEL, "Cancel")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_TREE_ITEM_EXPANDING, self.OnItemExpanding, self.tree_ctrl_browser)
        self.Bind(wx.EVT_TREE_SEL_CHANGED, self.OnSelChanged, self.tree_ctrl_browser)
        self.Bind(wx.EVT_BUTTON, self.OnCreateFolderClick, self.button_create_folder)
        self.Bind(wx.EVT_BUTTON, self.OnSelectButtonClick, self.button_select)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MoodleBrowserDialog.__set_properties
        self.SetTitle("dialog_6")
        self.SetSize((400, 245))
        self.label_notice.SetForegroundColour(wx.Colour(0, 0, 0))
        self.button_select.Enable(False)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MoodleBrowserDialog.__do_layout
        sizer_27 = wx.StaticBoxSizer(self.sizer_27_staticbox, wx.VERTICAL)
        sizer_29 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_39 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_21 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_27.Add(self.label_notice, 0, 0, 0)
        sizer_27.Add(self.tree_ctrl_browser, 1, wx.EXPAND, 0)
        sizer_39.Add(self.button_create_folder, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 2)
        sizer_21.Add(self.button_select, 0, wx.ALL|wx.ALIGN_RIGHT, 3)
        sizer_21.Add(self.button_cancel_copy, 0, wx.ALL|wx.ALIGN_RIGHT, 3)
        sizer_39.Add(sizer_21, 0, wx.ALIGN_RIGHT, 0)
        sizer_29.Add(sizer_39, 1, wx.ALIGN_RIGHT, 0)
        sizer_27.Add(sizer_29, 0, wx.EXPAND, 0)
        self.SetSizer(sizer_27)
        self.Layout()
        # end wxGlade
    
    def PopulateBrowser(self,site,config):
        self.label_notice.SetLabel('Populating tree, this can take a while')
        self.label_notice.SetForegroundColour(wx.RED)
        self.button_select.Disable()        
        self.button_create_folder.Disable()
        self.tree_ctrl_browser.Disable()
        self.file_browser = mbrowser.MoodleFileBrowser(site,config)
        root_branch = self.file_browser.get_root()
        root = self.tree_ctrl_browser.AddRoot(site.name)
        
        if root_branch is not False and len(root_branch) > 0:
            for key,el in root_branch.iteritems():
                child = self.tree_ctrl_browser.AppendItem(root, el['title'])
                self.tree_ctrl_browser.SetPyData(child,key)
                self.tree_ctrl_browser.SetItemHasChildren(child)
            
            self.tree_ctrl_browser.Expand(root)
            self.tree_ctrl_browser.Enable()
            self.label_notice.SetLabel('')

    def OnItemExpanding(self, event): # wxGlade: MoodleBrowserDialog.<event_handler>
        item = event.GetItem()
        b_id = self.tree_ctrl_browser.GetPyData(item)
        
        #self.button_select.Disable()
        if b_id is not None:
            self.tree_ctrl_browser.DeleteChildren(item)
            branch = self.file_browser.get_branch(b_id)
            
            if branch is not False:

                for key,el in branch.iteritems():
                    if 'path' in el:
                        child = self.tree_ctrl_browser.AppendItem(item, el['title'])
                        self.tree_ctrl_browser.SetPyData(child,key)
                        self.tree_ctrl_browser.SetItemHasChildren(child)        

                if self.tree_ctrl_browser.GetChildrenCount(item) == 0:
                    self.tree_ctrl_browser.SetItemHasChildren(item,False)

    def OnSelChanged(self, event): # wxGlade: MoodleBrowserDialog.<event_handler>
        item = event.GetItem()
        b_id = self.tree_ctrl_browser.GetPyData(item)
        if self.file_browser.can_upload(b_id):
            self.button_select.Enable()
            self.button_create_folder.Enable()
        else:
            self.button_select.Disable()    
            self.button_create_folder.Disable()
            

    def OnSelectButtonClick(self, event): # wxGlade: MoodleBrowserDialog.<event_handler>
        item = self.tree_ctrl_browser.GetSelection()
        if item is not None:
            self.file_browser.selected_dir = self.tree_ctrl_browser.GetPyData(item)
            dir_name = ''
                        
            while item.IsOk():
                if dir_name != '':
                    dir_name = self.tree_ctrl_browser.GetItemText(item) + '/' + dir_name
                else:
                    dir_name = self.tree_ctrl_browser.GetItemText(item)
                item = self.tree_ctrl_browser.GetItemParent(item)
                    
            self.file_browser.selected_dir_name = dir_name
            
        self.EndModal(wx.ID_OK)

    def OnCreateFolderClick(self, event): # wxGlade: MoodleBrowserDialog.<event_handler>
        item = self.tree_ctrl_browser.GetSelection()
        if item is not None:
            dlg = wx.TextEntryDialog(
                self, 'Please, type the new folder name',
                'Create Folder', '')

            if dlg.ShowModal() == wx.ID_OK:
                folder_name = dlg.GetValue()
                if self.file_browser.create_folder(self.tree_ctrl_browser.GetPyData(item),folder_name):
                    self.tree_ctrl_browser.SetItemHasChildren(item) 
                    self.tree_ctrl_browser.Collapse(item)        
                    self.tree_ctrl_browser.Expand(item)
            dlg.Destroy()   

            

# end of class MoodleBrowserDialog


class InputDataDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: InputDataDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE|wx.RESIZE_BORDER|wx.MAXIMIZE_BOX|wx.THICK_FRAME
        wx.Dialog.__init__(self, *args, **kwds)
        self.label_ws_name = wx.StaticText(self, -1, "label_17")
        self.label_param_name = wx.StaticText(self, -1, "Param:")
        self.combo_box_param = wx.ComboBox(self, -1, choices=[], style=wx.CB_DROPDOWN|wx.CB_READONLY)
        self.grid_data = wx.grid.Grid(self, -1, size=(1, 1))
        self.label_18 = wx.StaticText(self, -1, "Add rows:")
        self.combo_box_add_rows = wx.ComboBox(self, -1, choices=["0", "5", "10", "15", "30", "50"], style=wx.CB_DROPDOWN|wx.CB_READONLY)
        self.button_5 = wx.Button(self, -1, "Import CSV file")
        self.button_clear = wx.Button(self, -1, "Clear Grid")
        self.button_ok = wx.Button(self, wx.ID_OK, "OK")
        self.button_cancel = wx.Button(self, wx.ID_CANCEL, "Cancel")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_COMBOBOX, self.OnComboAddRowsSelect, self.combo_box_add_rows)
        self.Bind(wx.EVT_BUTTON, self.OnImportCSVButtonClick, self.button_5)
        self.Bind(wx.EVT_BUTTON, self.OnButtonClearClick, self.button_clear)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: InputDataDialog.__set_properties
        self.SetTitle("Input Data")
        self.SetSize((451, 380))
        self.grid_data.CreateGrid(10, 0)
        self.combo_box_add_rows.SetSelection(0)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: InputDataDialog.__do_layout
        sizer_19 = wx.BoxSizer(wx.VERTICAL)
        sizer_25 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_26 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_28 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_24 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_19.Add(self.label_ws_name, 0, wx.ALL, 5)
        sizer_24.Add(self.label_param_name, 0, wx.ALL, 5)
        sizer_24.Add(self.combo_box_param, 0, wx.ALL, 5)
        sizer_19.Add(sizer_24, 0, wx.EXPAND, 0)
        sizer_19.Add(self.grid_data, 1, wx.ALL|wx.EXPAND, 5)
        sizer_28.Add(self.label_18, 0, wx.ALL, 5)
        sizer_28.Add(self.combo_box_add_rows, 0, wx.ALL, 3)
        sizer_26.Add(sizer_28, 0, wx.EXPAND, 0)
        sizer_26.Add(self.button_5, 0, wx.LEFT, 20)
        sizer_26.Add(self.button_clear, 0, wx.LEFT|wx.ALIGN_RIGHT, 20)
        sizer_19.Add(sizer_26, 0, wx.TOP|wx.BOTTOM|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 6)
        sizer_25.Add(self.button_ok, 0, wx.RIGHT, 10)
        sizer_25.Add(self.button_cancel, 0, 0, 0)
        sizer_19.Add(sizer_25, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5)
        self.SetSizer(sizer_19)
        self.Layout()
        # end wxGlade

    def OnComboAddRowsSelect(self, event): # wxGlade: InputDataDialog.<event_handler>
        self.grid_data.AppendRows(int(self.combo_box_add_rows.GetValue()))
        cols = self.ws.get_grid_cols(self.param_name)
            
        pos = 0
        for col in cols:            
            if col['format'] == 'number':
                for i in range(0,self.grid_data.GetNumberRows()):
                    editor = gridlib.GridCellNumberEditor()
                    self.grid_data.SetCellEditor(i,pos,editor)
            
            pos = pos + 1
            
    def OnImportCSVButtonClick(self, event): # wxGlade: InputDataDialog.<event_handler>
        class UTF8Recoder:
            """
            Iterator that reads an encoded stream and reencodes the input to UTF-8
            """
            def __init__(self, f, encoding):
                self.reader = codecs.getreader(encoding)(f)

            def __iter__(self):
                return self

            def next(self):
                return self.reader.next().encode("utf-8")

        class UnicodeReader:
            """
            A CSV reader which will iterate over lines in the CSV file "f",
            which is encoded in the given encoding.
            """

            def __init__(self, f, dialect=csv.excel, encoding="utf-8", **kwds):
                f = UTF8Recoder(f, encoding)
                self.reader = csv.reader(f, dialect=dialect, **kwds)

            def next(self):
                row = self.reader.next()
                return [unicode(s, "utf-8") for s in row]

            def __iter__(self):
                return self
        
        wildcard = "CSV file (*.csv)|*.csv"        
        dlg = wx.FileDialog(
            self, message="Choose a file",
            defaultDir=os.getcwd(), 
            defaultFile="",
            wildcard=wildcard,
            style=wx.OPEN | wx.CHANGE_DIR
            )

        if dlg.ShowModal() == wx.ID_OK:
            path = dlg.GetPath()
            csvfile = open(path,'rb')
            #dialect = csv.Sniffer().sniff(csvfile.read(1024))
            csv.register_dialect('mycsv', delimiter=',', quoting=csv.QUOTE_NONE)
            dialect = 'mycsv'
            
            r = UnicodeReader(csvfile, dialect,'utf-8')
            num_rows = self.grid_data.GetNumberRows()
            num_cols = len(self.ws.get_grid_cols(self.param_name))
            
            for i in reversed(range(0,num_rows)):
                delete = True
                for j in range(0,num_cols):
                    if self.grid_data.GetCellValue(i,j) != u'':
                        delete = False
                if delete:
                    self.grid_data.DeleteRows(i)
            
            num_rows = self.grid_data.GetNumberRows()
            num_cols = len(self.ws.get_grid_cols(self.param_name))            
            
            for row in r:
                self.grid_data.AppendRows(1)
                num_rows = num_rows + 1
                for i in range(0,num_cols):
                    self.grid_data.SetCellValue(num_rows - 1, i,row[i])
                
        dlg.Destroy()
        
    
    def OnButtonClearClick(self, event): # wxGlade: InputDataDialog.<event_handler>
        self.grid_data.ClearGrid()        
   

# end of class InputDataDialog

    def LoadDataGrid(self,ws):
        self.label_ws_name.SetLabel(ws.name)

        #self.grid_data.DeleteCols(0)
        
        for pname,pdata in ws.params.iteritems():  
            self.combo_box_param.Append(pname)
            self.combo_box_param.SetValue(pname)
            cols = ws.get_grid_cols(pname)
            
            pos = 0
            for col in cols:
                self.grid_data.InsertCols(pos,1)
                self.grid_data.SetColLabelValue(pos,col['name'])
                
                if col['format'] == 'number':
                    for i in range(0,self.grid_data.GetNumberRows()):
                        editor = gridlib.GridCellNumberEditor()
                        self.grid_data.SetCellEditor(i,pos,editor)
                
                pos = pos + 1
            
            self.param_name = pname
            self.ws = ws 


class PreferencesDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: PreferencesDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.sizer_20_staticbox = wx.StaticBox(self, -1, "Scheluded Tasks:")
        self.label_7 = wx.StaticText(self, -1, "Site information gatherer:")
        self.combo_box_info_gatherer = wx.ComboBox(self, -1, choices=[], style=wx.CB_DROPDOWN|wx.CB_READONLY)
        self.label_13 = wx.StaticText(self, -1, "URL Monitor:")
        self.combo_box_url_monitor = wx.ComboBox(self, -1, choices=[], style=wx.CB_DROPDOWN|wx.CB_READONLY)
        self.button_save = wx.Button(self, wx.ID_OK, "Save")
        self.button_cancel = wx.Button(self, wx.ID_CANCEL, "Cancel")

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: PreferencesDialog.__set_properties
        self.SetTitle("dialog_4")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: PreferencesDialog.__do_layout
        sizer_17 = wx.BoxSizer(wx.VERTICAL)
        sizer_18 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_20 = wx.StaticBoxSizer(self.sizer_20_staticbox, wx.HORIZONTAL)
        grid_sizer_4 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_4.Add(self.label_7, 0, 0, 0)
        grid_sizer_4.Add(self.combo_box_info_gatherer, 0, wx.ALL, 3)
        grid_sizer_4.Add(self.label_13, 0, 0, 0)
        grid_sizer_4.Add(self.combo_box_url_monitor, 0, wx.ALL, 3)
        sizer_20.Add(grid_sizer_4, 0, wx.EXPAND, 0)
        sizer_17.Add(sizer_20, 1, wx.ALL|wx.EXPAND, 6)
        sizer_18.Add(self.button_save, 0, 0, 0)
        sizer_18.Add(self.button_cancel, 0, 0, 0)
        sizer_17.Add(sizer_18, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 6)
        self.SetSizer(sizer_17)
        sizer_17.Fit(self)
        self.Layout()
        # end wxGlade

# end of class PreferencesDialog


class ChangeMasterPasswordDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: ChangeMasterPasswordDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.label_notice = wx.StaticText(self, -1, "", style=wx.ALIGN_CENTRE)
        self.label_8 = wx.StaticText(self, -1, "Current Master Password:")
        self.text_ctrl_current = wx.TextCtrl(self, -1, "", style=wx.TE_PASSWORD)
        self.label_9 = wx.StaticText(self, -1, "New Master Password:")
        self.text_ctrl_new = wx.TextCtrl(self, -1, "", style=wx.TE_PASSWORD)
        self.label_10 = wx.StaticText(self, -1, "Repeat:")
        self.text_ctrl_repeat = wx.TextCtrl(self, -1, "", style=wx.TE_PASSWORD)
        self.button_change = wx.Button(self, wx.ID_OK, "Change")
        self.button_cancel = wx.Button(self, wx.ID_CANCEL, "Cancel")

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: ChangeMasterPasswordDialog.__set_properties
        self.SetTitle("Change Master Password")
        self.label_notice.SetForegroundColour(wx.Colour(255, 0, 0))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: ChangeMasterPasswordDialog.__do_layout
        sizer_14 = wx.BoxSizer(wx.VERTICAL)
        sizer_15 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_3 = wx.GridSizer(3, 2, 0, 0)
        sizer_14.Add(self.label_notice, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3.Add(self.label_8, 0, 0, 0)
        grid_sizer_3.Add(self.text_ctrl_current, 0, wx.BOTTOM, 4)
        grid_sizer_3.Add(self.label_9, 0, wx.TOP, 4)
        grid_sizer_3.Add(self.text_ctrl_new, 0, wx.TOP, 4)
        grid_sizer_3.Add(self.label_10, 0, 0, 0)
        grid_sizer_3.Add(self.text_ctrl_repeat, 0, wx.TOP, 4)
        sizer_14.Add(grid_sizer_3, 0, wx.ALL|wx.EXPAND, 6)
        sizer_15.Add(self.button_change, 0, wx.RIGHT, 6)
        sizer_15.Add(self.button_cancel, 0, 0, 0)
        sizer_14.Add(sizer_15, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.SetSizer(sizer_14)
        sizer_14.Fit(self)
        self.Layout()
        # end wxGlade

# end of class ChangeMasterPasswordDialog


class NewSiteDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: NewSiteDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.panel_1 = wx.Panel(self, -1)
        self.notebook_2 = wx.Notebook(self.panel_1, -1, style=0)
        self.notebook_2_pane_3 = wx.Panel(self.notebook_2, -1)
        self.notebook_2_pane_2 = wx.Panel(self.notebook_2, -1)
        self.sizer_41_staticbox = wx.StaticBox(self.notebook_2_pane_3, -1, "Notes")
        self.notebook_2_pane_1 = wx.Panel(self.notebook_2, -1)
        self.label_notice = wx.StaticText(self, -1, "", style=wx.ALIGN_CENTRE)
        self.label_12 = wx.StaticText(self.notebook_2_pane_1, -1, "Site name:")
        self.text_ctrl_name = wx.TextCtrl(self.notebook_2_pane_1, -1, "")
        self.label_1 = wx.StaticText(self.notebook_2_pane_1, -1, "URL:")
        self.text_ctrl_url = wx.TextCtrl(self.notebook_2_pane_1, -1, "")
        self.label_2 = wx.StaticText(self.notebook_2_pane_1, -1, "Username:")
        self.text_ctrl_username = wx.TextCtrl(self.notebook_2_pane_1, -1, "")
        self.label_3 = wx.StaticText(self.notebook_2_pane_1, -1, "Password:")
        self.text_ctrl_password = wx.TextCtrl(self.notebook_2_pane_1, -1, "", style=wx.TE_PASSWORD)
        self.label_22 = wx.StaticText(self.notebook_2_pane_1, -1, "URL Monitor:")
        self.checkbox_monitor = wx.CheckBox(self.notebook_2_pane_1, -1, "Enable URL Monitor")
        self.label_23 = wx.StaticText(self.notebook_2_pane_1, -1, "Site Information:")
        self.checkbox_gatherer = wx.CheckBox(self.notebook_2_pane_1, -1, "Enable Gatherer")
        self.label_4 = wx.StaticText(self.notebook_2_pane_2, -1, "Token:")
        self.text_ctrl_wstoken = wx.TextCtrl(self.notebook_2_pane_2, -1, "")
        self.label_5 = wx.StaticText(self.notebook_2_pane_2, -1, "Username:")
        self.text_ctrl_wsusername = wx.TextCtrl(self.notebook_2_pane_2, -1, "")
        self.label_6 = wx.StaticText(self.notebook_2_pane_2, -1, "Password:")
        self.text_ctrl_wspassword = wx.TextCtrl(self.notebook_2_pane_2, -1, "", style=wx.TE_PASSWORD)
        self.text_ctrl_notes = wx.TextCtrl(self.notebook_2_pane_3, -1, "", style=wx.TE_MULTILINE)
        self.button_save = wx.Button(self, -1, "Save")
        self.button_2 = wx.Button(self, wx.ID_CANCEL, "Cancel")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.OnSaveButtonClick, self.button_save)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: NewSiteDialog.__set_properties
        self.SetTitle("New Site")
        self.SetForegroundColour(wx.Colour(255, 0, 0))
        self.label_notice.SetForegroundColour(wx.Colour(255, 0, 0))
        self.label_12.SetMinSize((75, -1))
        self.label_1.SetMinSize((75, -1))
        self.label_2.SetMinSize((75, -1))
        self.label_3.SetMinSize((75, -1))
        self.label_22.SetMinSize((85, -1))
        self.label_23.SetMinSize((85, -1))
        self.label_4.SetMinSize((75, -1))
        self.label_5.SetMinSize((75, -1))
        self.label_6.SetMinSize((75, -1))
        self.text_ctrl_notes.SetMinSize((150, 150))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: NewSiteDialog.__do_layout
        sizer_7 = wx.BoxSizer(wx.VERTICAL)
        sizer_10 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_40 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_41 = wx.StaticBoxSizer(self.sizer_41_staticbox, wx.HORIZONTAL)
        sizer_42 = wx.BoxSizer(wx.VERTICAL)
        sizer_45 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_44 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_43 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_46 = wx.BoxSizer(wx.VERTICAL)
        sizer_47_copy_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_47_copy_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_47_copy_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_47_copy_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_47_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_47 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_7.Add(self.label_notice, 0, wx.LEFT, 50)
        sizer_47.Add(self.label_12, 0, 0, 0)
        sizer_47.Add(self.text_ctrl_name, 0, 0, 0)
        sizer_46.Add(sizer_47, 0, wx.ALL|wx.EXPAND, 5)
        sizer_47_copy.Add(self.label_1, 0, 0, 0)
        sizer_47_copy.Add(self.text_ctrl_url, 0, 0, 0)
        sizer_46.Add(sizer_47_copy, 0, wx.ALL|wx.EXPAND, 5)
        sizer_47_copy_1.Add(self.label_2, 0, 0, 0)
        sizer_47_copy_1.Add(self.text_ctrl_username, 0, 0, 0)
        sizer_46.Add(sizer_47_copy_1, 0, wx.ALL|wx.EXPAND, 5)
        sizer_47_copy_2.Add(self.label_3, 0, 0, 0)
        sizer_47_copy_2.Add(self.text_ctrl_password, 0, 0, 0)
        sizer_46.Add(sizer_47_copy_2, 0, wx.ALL|wx.EXPAND, 5)
        sizer_47_copy_3.Add(self.label_22, 0, 0, 0)
        sizer_47_copy_3.Add(self.checkbox_monitor, 0, 0, 0)
        sizer_46.Add(sizer_47_copy_3, 0, wx.ALL|wx.EXPAND, 5)
        sizer_47_copy_4.Add(self.label_23, 0, 0, 0)
        sizer_47_copy_4.Add(self.checkbox_gatherer, 0, 0, 0)
        sizer_46.Add(sizer_47_copy_4, 0, wx.ALL|wx.EXPAND, 5)
        self.notebook_2_pane_1.SetSizer(sizer_46)
        sizer_43.Add(self.label_4, 0, 0, 0)
        sizer_43.Add(self.text_ctrl_wstoken, 0, 0, 0)
        sizer_42.Add(sizer_43, 0, wx.ALL, 5)
        sizer_44.Add(self.label_5, 0, 0, 0)
        sizer_44.Add(self.text_ctrl_wsusername, 0, 0, 0)
        sizer_42.Add(sizer_44, 0, wx.ALL|wx.EXPAND, 5)
        sizer_45.Add(self.label_6, 0, 0, 0)
        sizer_45.Add(self.text_ctrl_wspassword, 0, 0, 0)
        sizer_42.Add(sizer_45, 0, wx.ALL|wx.EXPAND, 5)
        self.notebook_2_pane_2.SetSizer(sizer_42)
        sizer_41.Add(self.text_ctrl_notes, 0, 0, 0)
        self.notebook_2_pane_3.SetSizer(sizer_41)
        self.notebook_2.AddPage(self.notebook_2_pane_1, "Site")
        self.notebook_2.AddPage(self.notebook_2_pane_2, "Webservices")
        self.notebook_2.AddPage(self.notebook_2_pane_3, "Notes")
        sizer_40.Add(self.notebook_2, 1, wx.ALL|wx.EXPAND, 5)
        self.panel_1.SetSizer(sizer_40)
        sizer_7.Add(self.panel_1, 1, wx.EXPAND, 0)
        sizer_10.Add(self.button_save, 0, wx.ALL, 1)
        sizer_10.Add(self.button_2, 0, wx.ALL, 1)
        sizer_7.Add(sizer_10, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        self.SetSizer(sizer_7)
        sizer_7.Fit(self)
        self.Layout()
        # end wxGlade

    def OnSaveButtonClick(self, event): # wxGlade: NewSiteDialog.<event_handler>
        if len(self.text_ctrl_name.GetValue()) < 1:
            self.label_notice.SetLabel('Site name required')
            return False
        
        url = self.text_ctrl_url.GetValue()
        if url != '' and url[-1] == '/':
            url[0:len(url) - 1]            
            self.text_ctrl_url.SetValue(url)
            
        if url != 'http://localhost' and re.match('(http|https):\/\/[\w\-_]+(\.[\w\-_]+)+([\w\-\.,@?^=%&amp;:/~\+#]*[\w\-\@?^=%&amp;/~\+#])?',url) is None:
            self.label_notice.SetLabel('Incorrect url')
            return False

        if (self.text_ctrl_username.GetValue() == '' or self.text_ctrl_password.GetValue() == '') and len(self.text_ctrl_wstoken.GetValue()) != 32 and ((self.text_ctrl_wsusername.GetValue() == '' or self.text_ctrl_wspassword.GetValue() == '')):
            self.label_notice.SetLabel('Username,password or WS Token required')
            return False
        
        if len(self.text_ctrl_url.GetValue()) < 1:
            self.label_notice.SetLabel('Site name required')
            return False       
        
        self.EndModal(wx.ID_OK)
# end of class NewSiteDialog


class MasterPasswordDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MasterPasswordDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.sizer_11_staticbox = wx.StaticBox(self, -1, "Master Password")
        self.label_master_password = wx.StaticText(self, -1, "Please, type your master password.")
        self.text_ctrl_master_password = wx.TextCtrl(self, -1, "", style=wx.TE_PASSWORD)
        self.button_3 = wx.Button(self, wx.ID_OK, "OK")

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MasterPasswordDialog.__set_properties
        self.SetTitle("Master Password Required")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MasterPasswordDialog.__do_layout
        sizer_11 = wx.StaticBoxSizer(self.sizer_11_staticbox, wx.VERTICAL)
        sizer_12 = wx.BoxSizer(wx.VERTICAL)
        sizer_12.Add(self.label_master_password, 0, wx.ALL, 10)
        sizer_12.Add(self.text_ctrl_master_password, 0, wx.ALL|wx.EXPAND|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 15)
        sizer_12.Add(self.button_3, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_11.Add(sizer_12, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_11)
        sizer_11.Fit(self)
        self.Layout()
        # end wxGlade

# end of class MasterPasswordDialog


class NewSiteWindow(wx.Frame):
    def __init__(self, *args, **kwds):
        # content of this block not found: did you rename this class?
        pass

    def __set_properties(self):
        # content of this block not found: did you rename this class?
        pass

    def __do_layout(self):
        # content of this block not found: did you rename this class?
        pass

# end of class NewSiteWindow


class MasterPasswordWindow(wx.Frame):
    def __init__(self, *args, **kwds):
        # content of this block not found: did you rename this class?
        pass

    def __set_properties(self):
        # content of this block not found: did you rename this class?
        pass

    def __do_layout(self):
        # content of this block not found: did you rename this class?
        pass

# end of class MasterPasswordWindow


class MyMainFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyMainFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.notebook_1 = wx.Notebook(self, -1, style=0)
        self.notebook_1_pane_4 = wx.Panel(self.notebook_1, -1)
        self.notebook_reports = wx.Notebook(self.notebook_1_pane_4, -1, style=0)
        self.notebook_reports_pane_2 = wx.Panel(self.notebook_reports, -1)
        self.notebook_3_pane_1 = wx.Panel(self.notebook_reports, -1)
        self.notebook_1_pane_3 = wx.Panel(self.notebook_1, -1)
        self.notebook_1_pane_2 = wx.Panel(self.notebook_1, -1)
        self.notebook_1_pane_1 = wx.Panel(self.notebook_1, -1)
        self.sizer_32_staticbox = wx.StaticBox(self.notebook_1_pane_3, -1, "Choose files to upload")
        self.sizer_31_staticbox = wx.StaticBox(self.notebook_1_pane_3, -1, "Transfer queue:")
        self.sizer_36_staticbox = wx.StaticBox(self.notebook_1_pane_1, -1, "Site Information")
        
        # Menu Bar
        self.frame_1_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        self.menu_exit = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "Exit", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.menu_exit)
        self.frame_1_menubar.Append(wxglade_tmp_menu, "File")
        wxglade_tmp_menu = wx.Menu()
        self.menu_newsite = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "New Moodle Site", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.menu_newsite)
        self.menu_site_refresh = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "Refresh site information", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.menu_site_refresh)
        self.menu_site_update_icon = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "Update favicon", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.menu_site_update_icon)
        self.frame_1_menubar.Append(wxglade_tmp_menu, "Sites")
        wxglade_tmp_menu = wx.Menu()
        self.menu_moodle = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "Moodle", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.menu_moodle)
        self.menu_search_docs = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "Search in Moodle Docs", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.menu_search_docs)
        self.menu_moodle_tracker = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "Moodle Tracker", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.menu_moodle_tracker)
        self.menu_xref = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "Xref", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.menu_xref)
        self.frame_1_menubar.Append(wxglade_tmp_menu, "Links")
        wxglade_tmp_menu = wx.Menu()
        self.menu_preferences = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "Preferences", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.menu_preferences)
        self.menu_change_mp = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "Change Master Password", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.menu_change_mp)
        self.frame_1_menubar.Append(wxglade_tmp_menu, "Options")
        wxglade_tmp_menu = wx.Menu()
        self.menu_website = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "Website", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.menu_website)
        self.menu_about = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "About", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.menu_about)
        self.frame_1_menubar.Append(wxglade_tmp_menu, "Help")
        self.SetMenuBar(self.frame_1_menubar)
        # Menu Bar end
        self.frame_1_statusbar = self.CreateStatusBar(2, 0)
        self.label_11 = wx.StaticText(self, -1, "Filter sites:")
        self.text_ctrl_filter = wx.TextCtrl(self, -1, "")
        self.list_ctrl_sites = wx.ListCtrl(self, -1, style=wx.LC_REPORT|wx.SUNKEN_BORDER)
        self.button_new = wx.Button(self, -1, "Add")
        self.button_edit = wx.Button(self, -1, "Edit")
        self.button_remove = wx.Button(self, -1, "Remove")
        self.label_login = wx.StaticText(self.notebook_1_pane_1, -1, "Login in the selected sites")
        self.button_login = wx.Button(self.notebook_1_pane_1, -1, "Login")
        self.htmlwindow_info = wx.html.HtmlWindow(self.notebook_1_pane_1, -1, style=wx.TAB_TRAVERSAL)
        self.label_19 = wx.StaticText(self.notebook_1_pane_2, -1, "Only for Moodle 2 sites")
        self.label_16 = wx.StaticText(self.notebook_1_pane_2, -1, "Select a web service")
        self.combo_box_ws = wx.ComboBox(self.notebook_1_pane_2, -1, choices=[], style=wx.CB_DROPDOWN|wx.CB_READONLY)
        self.button_open_idata = wx.Button(self.notebook_1_pane_2, -1, "Load data and run ws")
        self.label_15 = wx.StaticText(self.notebook_1_pane_2, -1, "Server response:")
        self.text_ctrl_ws_log = wx.TextCtrl(self.notebook_1_pane_2, -1, "", style=wx.TE_MULTILINE|wx.TE_READONLY)
        self.label_21 = wx.StaticText(self.notebook_1_pane_2, -1, "Grid response:")
        self.grid_ws = wx.grid.Grid(self.notebook_1_pane_2, -1, size=(1, 1))
        self.button_save_csv = wx.Button(self.notebook_1_pane_2, -1, "Save as spreadsheet")
        self.list_ctrl_files = wx.ListCtrl(self.notebook_1_pane_3, -1, style=wx.LC_REPORT|wx.SUNKEN_BORDER)
        self.button_add_files = wx.Button(self.notebook_1_pane_3, -1, "Add")
        self.button_remove_files = wx.Button(self.notebook_1_pane_3, -1, "Remove")
        self.label_20 = wx.StaticText(self.notebook_1_pane_3, -1, "Destination:")
        self.text_ctrl_destination = wx.TextCtrl(self.notebook_1_pane_3, -1, "", style=wx.TE_READONLY)
        self.button_browse = wx.Button(self.notebook_1_pane_3, -1, "Browse Moodle Site")
        self.button_upload_files = wx.Button(self.notebook_1_pane_3, -1, "Upload Files")
        self.list_ctrl_uploading = wx.ListCtrl(self.notebook_1_pane_3, -1, style=wx.LC_REPORT|wx.SUNKEN_BORDER)
        self.grid_report_information = wx.grid.Grid(self.notebook_3_pane_1, -1, size=(1, 1))
        self.grid_report_monitor = wx.grid.Grid(self.notebook_reports_pane_2, -1, size=(1, 1))
        self.button_save_report = wx.Button(self.notebook_1_pane_4, -1, "Save as spreadsheet")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_MENU, self.OnExitMenuClick, self.menu_exit)
        self.Bind(wx.EVT_MENU, self.OnNewSiteMenuClick, self.menu_newsite)
        self.Bind(wx.EVT_MENU, self.OnMenuSiteRefreshClick, self.menu_site_refresh)
        self.Bind(wx.EVT_MENU, self.OnMenuSiteUpdateIconClick, self.menu_site_update_icon)
        self.Bind(wx.EVT_MENU, self.OnMenuMoodleClick, self.menu_moodle)
        self.Bind(wx.EVT_MENU, self.OnSearchDocsMenuClick, self.menu_search_docs)
        self.Bind(wx.EVT_MENU, self.OnMoodleTrackerMenuClick, self.menu_moodle_tracker)
        self.Bind(wx.EVT_MENU, self.OnMenuXrefClick, self.menu_xref)
        self.Bind(wx.EVT_MENU, self.OnPreferencesMenuClick, self.menu_preferences)
        self.Bind(wx.EVT_MENU, self.OnChangeMPMenuClick, self.menu_change_mp)
        self.Bind(wx.EVT_MENU, self.OnWebsiteMenuClick, self.menu_website)
        self.Bind(wx.EVT_MENU, self.OnAboutMenuClick, self.menu_about)
        self.Bind(wx.EVT_TEXT_ENTER, self.OnFilterEnter, self.text_ctrl_filter)
        self.Bind(wx.EVT_TEXT, self.OnFilterText, self.text_ctrl_filter)
        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSitesListSelected, self.list_ctrl_sites)
        self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnSitesListKeyDown, self.list_ctrl_sites)
        self.Bind(wx.EVT_BUTTON, self.OnNewSiteButtonClick, self.button_new)
        self.Bind(wx.EVT_BUTTON, self.OnEditSiteButtonClick, self.button_edit)
        self.Bind(wx.EVT_BUTTON, self.OnRemoveSiteButtonClick, self.button_remove)
        self.Bind(wx.EVT_BUTTON, self.OnButtonLoginClick, self.button_login)
        self.Bind(wx.EVT_COMBOBOX, self.OnComboWSSelected, self.combo_box_ws)
        self.Bind(wx.EVT_BUTTON, self.OnOpenIDataButtonClick, self.button_open_idata)
        self.Bind(wx.EVT_BUTTON, self.OnSaveSpreadsheetButtonClick, self.button_save_csv)
        self.Bind(wx.EVT_BUTTON, self.OnAddFilesButtonClick, self.button_add_files)
        self.Bind(wx.EVT_BUTTON, self.OnRemoveFileButtonClick, self.button_remove_files)
        self.Bind(wx.EVT_BUTTON, self.OnFileBrowserButtonClick, self.button_browse)
        self.Bind(wx.EVT_BUTTON, self.OnUploadFilesButtonClick, self.button_upload_files)
        self.Bind(wx.EVT_BUTTON, self.OnSaveReportButtonClick, self.button_save_report)
        self.Bind(wx.EVT_NOTEBOOK_PAGE_CHANGED, self.OnMainNoteBookChanged, self.notebook_1)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyMainFrame.__set_properties
        self.SetTitle("MooConsole")
        self.SetSize((825, 521))
        self.SetBackgroundColour(wx.Colour(212, 208, 200))
        self.frame_1_statusbar.SetStatusWidths([-2, -1])
        # statusbar fields
        frame_1_statusbar_fields = ["", "MooConsole - Juan Leyva 2010"]
        for i in range(len(frame_1_statusbar_fields)):
            self.frame_1_statusbar.SetStatusText(frame_1_statusbar_fields[i], i)
        self.text_ctrl_filter.SetFocus()
        self.htmlwindow_info.SetScrollRate(10, 10)
        self.label_19.SetForegroundColour(wx.Colour(255, 0, 0))
        self.grid_ws.CreateGrid(10, 0)
        self.grid_ws.Enable(False)
        self.button_upload_files.SetMinSize((150, -1))
        self.button_upload_files.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.button_upload_files.Enable(False)
        self.grid_report_information.CreateGrid(0, 1)
        self.grid_report_information.SetColLabelValue(0, "")
        self.grid_report_monitor.CreateGrid(0, 0)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyMainFrame.__do_layout
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_8 = wx.BoxSizer(wx.VERTICAL)
        sizer_48 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_9 = wx.BoxSizer(wx.VERTICAL)
        sizer_30 = wx.BoxSizer(wx.VERTICAL)
        sizer_31 = wx.StaticBoxSizer(self.sizer_31_staticbox, wx.HORIZONTAL)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_38 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_35 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_32 = wx.StaticBoxSizer(self.sizer_32_staticbox, wx.HORIZONTAL)
        sizer_33 = wx.BoxSizer(wx.VERTICAL)
        sizer_34 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_22 = wx.BoxSizer(wx.VERTICAL)
        sizer_23 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_37 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_13 = wx.BoxSizer(wx.VERTICAL)
        sizer_36 = wx.StaticBoxSizer(self.sizer_36_staticbox, wx.HORIZONTAL)
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_16 = wx.BoxSizer(wx.VERTICAL)
        sizer_16.Add(self.label_11, 0, wx.LEFT, 2)
        sizer_16.Add(self.text_ctrl_filter, 0, wx.ALL|wx.EXPAND, 4)
        sizer_4.Add(sizer_16, 0, wx.EXPAND, 0)
        sizer_4.Add(self.list_ctrl_sites, 1, wx.ALL|wx.EXPAND, 2)
        sizer_6.Add(self.button_new, 0, wx.ALL, 3)
        sizer_6.Add(self.button_edit, 0, wx.ALL, 3)
        sizer_6.Add(self.button_remove, 0, wx.ALL, 3)
        sizer_4.Add(sizer_6, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 2)
        sizer_3.Add(sizer_4, 1, wx.EXPAND, 0)
        sizer_13.Add((20, 20), 0, 0, 0)
        sizer_13.Add(self.label_login, 0, wx.ALL, 5)
        sizer_13.Add(self.button_login, 0, wx.ALL, 5)
        sizer_36.Add(self.htmlwindow_info, 1, wx.EXPAND, 0)
        sizer_13.Add(sizer_36, 1, wx.EXPAND, 0)
        self.notebook_1_pane_1.SetSizer(sizer_13)
        sizer_22.Add((20, 20), 0, 0, 0)
        sizer_22.Add(self.label_19, 0, 0, 0)
        sizer_22.Add(self.label_16, 0, wx.ALL, 5)
        sizer_37.Add(self.combo_box_ws, 1, wx.ALL, 5)
        sizer_37.Add(self.button_open_idata, 0, wx.ALL, 5)
        sizer_22.Add(sizer_37, 0, wx.EXPAND, 0)
        sizer_22.Add(sizer_23, 0, wx.EXPAND, 0)
        sizer_22.Add(self.label_15, 0, 0, 0)
        sizer_22.Add(self.text_ctrl_ws_log, 1, wx.EXPAND, 0)
        sizer_22.Add(self.label_21, 0, 0, 0)
        sizer_22.Add(self.grid_ws, 3, wx.EXPAND, 0)
        sizer_22.Add(self.button_save_csv, 0, wx.ALL|wx.ALIGN_RIGHT, 5)
        self.notebook_1_pane_2.SetSizer(sizer_22)
        sizer_33.Add(self.list_ctrl_files, 1, wx.EXPAND, 0)
        sizer_34.Add(self.button_add_files, 0, wx.RIGHT, 10)
        sizer_34.Add(self.button_remove_files, 0, 0, 0)
        sizer_33.Add(sizer_34, 0, wx.TOP, 4)
        sizer_32.Add(sizer_33, 1, wx.EXPAND, 0)
        sizer_30.Add(sizer_32, 1, wx.EXPAND, 0)
        sizer_35.Add(self.label_20, 0, wx.RIGHT|wx.ALIGN_CENTER_VERTICAL, 4)
        sizer_35.Add(self.text_ctrl_destination, 1, wx.EXPAND, 0)
        sizer_35.Add(self.button_browse, 0, wx.LEFT, 4)
        sizer_38.Add(sizer_35, 1, wx.EXPAND, 0)
        sizer_30.Add(sizer_38, 0, wx.ALL|wx.EXPAND, 8)
        sizer_5.Add(self.button_upload_files, 0, wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_30.Add(sizer_5, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 2)
        sizer_31.Add(self.list_ctrl_uploading, 1, wx.EXPAND, 0)
        sizer_30.Add(sizer_31, 1, wx.EXPAND, 0)
        self.notebook_1_pane_3.SetSizer(sizer_30)
        sizer_9.Add(self.grid_report_information, 1, wx.ALL|wx.EXPAND, 8)
        self.notebook_3_pane_1.SetSizer(sizer_9)
        sizer_48.Add(self.grid_report_monitor, 1, wx.ALL|wx.EXPAND, 8)
        self.notebook_reports_pane_2.SetSizer(sizer_48)
        self.notebook_reports.AddPage(self.notebook_3_pane_1, "Site Information")
        self.notebook_reports.AddPage(self.notebook_reports_pane_2, "URL Monitor Alerts")
        sizer_8.Add(self.notebook_reports, 1, wx.ALL|wx.EXPAND, 6)
        sizer_8.Add(self.button_save_report, 0, wx.ALIGN_RIGHT, 0)
        self.notebook_1_pane_4.SetSizer(sizer_8)
        self.notebook_1.AddPage(self.notebook_1_pane_1, "Main")
        self.notebook_1.AddPage(self.notebook_1_pane_2, "Web services")
        self.notebook_1.AddPage(self.notebook_1_pane_3, "File uploader")
        self.notebook_1.AddPage(self.notebook_1_pane_4, "Reports")
        sizer_1.Add(self.notebook_1, 1, wx.ALL|wx.EXPAND, 4)
        sizer_3.Add(sizer_1, 2, wx.EXPAND, 0)
        sizer_2.Add(sizer_3, 1, wx.ALL|wx.EXPAND, 4)
        self.SetSizer(sizer_2)
        self.Layout()
        # end wxGlade
        
        self.msites = []
        
        self.Centre()
        self.config = MConfig()
        
        self.RequireMasterPassword()
        
        self.logger = logging.getLogger('MLogger')
        self.logger.setLevel(logging.DEBUG)
        handler = logging.handlers.RotatingFileHandler(
              self.config.log_path, maxBytes=int(self.config.preferences['max_log_file_size']), backupCount=int(self.config.preferences['max_log_files']))

        formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
        handler.setFormatter(formatter)
        self.logger.addHandler(handler)        
        
        self.logger.debug('Starting application')        
        
        favicon = wx.Icon(os.path.join(self.config.img_path,'moodle.ico'), wx.BITMAP_TYPE_ICO, 16, 16)
        self.SetIcon(favicon)
        
        self.logger.debug('App icon loaded')        
        
        self.list_ctrl_sites.InsertColumn(0,'Site')
        self.list_ctrl_sites.InsertColumn(1,'User name')
        self.list_ctrl_sites.InsertColumn(2,'URL')

        self.list_ctrl_files.InsertColumn(0,'File name')
        self.list_ctrl_files.InsertColumn(1,'Complete file path')

        self.list_ctrl_uploading.InsertColumn(0,'File name')
        self.list_ctrl_uploading.InsertColumn(1,'Status')
        self.list_ctrl_uploading.InsertColumn(2,'Destination')
        self.list_ctrl_uploading.InsertColumn(3,'Complete file path')

        self.PopulateList(update_cache=1)
        
        self.logger.debug('Site list loaded')
        
        self.m_ws = MoodleWSHelper(self.config.ws_path).ws_list
        
        self.combo_box_ws.Append('Select', '')
        self.combo_box_ws.SetValue('Select')
        for ws in self.m_ws:
            self.combo_box_ws.Append(ws['name'],ws['wsfname'])
            
        
        self.logger.debug('Webservices loaded')        
        
        self.upload_site = None
        self.upload_dir = ''
        self.upload_queue = []
        
        self.current_report = {}
            
        
        self.Bind(wx.EVT_TIMER, self.OnTimerEvent)
        self.t1 = wx.Timer(self)
        self.t1.Start(60000)
        
        self.logger.debug('Timer started')
           
        self.RunPeriodicProcesses()
        
        self.logger.debug('Periodic Processes started')
        
        self.text_ctrl_filter.Bind(wx.EVT_KEY_DOWN, self.OnKeyDown)
        
    
    def OnKeyDown(self,event):
        keycode = event.GetKeyCode()
        if keycode == 70 and event.CmdDown():       
            self.DoSearch()
        event.Skip()       
        
        
    def ChangeSiteURLStatus(self,site,status,info):
        item = self.list_ctrl_sites.GetItem(site['list_item_id'])
        if not status:
            today_date = strftime('%Y-%m-%d %H:%M:%S',localtime())
            item.SetTextColour(wx.RED)
            try:
                con = sqlite3.connect(self.config.db_path)    
                c = con.cursor()                
                c.execute('insert into log (siteid,component,info,data,date) values (?,?,?,?,?)',(site['db_id'],'url_monitor','Error',info,today_date))
                con.commit()
                c.close()
            except:
                self.logger.debug('Error saving url monitor data: %s',sys.exc_info())
        else:
            item.SetTextColour(wx.BLACK)
        self.list_ctrl_sites.SetItem(item)
        
    def RunPeriodicProcesses(self):
        if int(self.config.preferences['url_monitor_time']) > 0:
            last_exec = int(self.config.preferences['last_monitor_exec'])
            if time.time() > int(self.config.preferences['url_monitor_time']) + last_exec:
                self.config.preferences['last_monitor_exec'] = str(int(time.time()))
                pu = murlmonitor.URLCheckThread(self.msites,self.ChangeSiteURLStatus)
                pu.start()
                self.config.save_pref('last_monitor_exec')
            
        if int(self.config.preferences['site_gatherer_time']) > 0:
            last_exec = int(self.config.preferences['last_gatherer_exec'])
            if time.time() > int(self.config.preferences['site_gatherer_time']) + last_exec:
                self.config.preferences['last_gatherer_exec'] = str(int(time.time()))
                pg = minfogatherer.SiteInfoGatherer(self.config, self.msites)
                pg.start()
                self.config.save_pref('last_gatherer_exec')
                
    
    def OnTimerEvent(self,evt):
        self.RunPeriodicProcesses()


    def OnNewSiteButtonClick(self, event): # wxGlade: MyMainFrame.<event_handler>
        self.OpenNewSiteDialog()
        
    def OpenNewSiteDialog(self):
        dlg = NewSiteDialog(self, -1)
        dlg.CenterOnScreen()
        dlg.button_save.SetDefault()
        
        val = dlg.ShowModal()
        
        if val == wx.ID_OK:

            gatherer = 0
            monitor = 0
            
            if dlg.checkbox_monitor.GetValue() is True:
                monitor = 1
            
            if dlg.checkbox_gatherer.GetValue() is True:
                gatherer = 1
            
            site = MoodleSite(self.config,dlg.text_ctrl_name.GetValue(),dlg.text_ctrl_url.GetValue(),dlg.text_ctrl_username.GetValue(),dlg.text_ctrl_password.GetValue(),dlg.text_ctrl_notes.GetValue(),dlg.text_ctrl_wstoken.GetValue(),dlg.text_ctrl_wsusername.GetValue(),dlg.text_ctrl_wspassword.GetValue(),monitor,gatherer)
            site.save_to_db()
            threading.Thread(target = site.get_favicon).start()
            threading.Thread(target = site.get_info).start()
            self.PopulateList(update_cache=1)    
        dlg.Destroy()    
    
    def PopulateList(self, sites = [],update_cache=0):
        if len(sites) > 0:
            self.list_ctrl_sites.DeleteAllItems()
            for site in sites:
                if site['id_ico'] is not None:
                    index = self.list_ctrl_sites.InsertImageStringItem(sys.maxint, site['name'],site['id_ico'])
                else:
                    index = self.list_ctrl_sites.InsertImageStringItem(sys.maxint, site['name'])    
                self.list_ctrl_sites.SetItemData(index, site['db_id'])
                self.list_ctrl_sites.SetStringItem(index, 1, site['username'])
                self.list_ctrl_sites.SetStringItem(index, 2, site['url'])
                self.list_ctrl_sites.SetItemState(index, wx.LIST_STATE_SELECTED,wx.LIST_STATE_SELECTED)    
            
        else:
       
            self.il = wx.ImageList(16, 16)
            self.list_ctrl_sites.SetImageList(self.il, wx.IMAGE_LIST_SMALL)   

            con = sqlite3.connect(self.config.db_path)    
            c = con.cursor()
                        
            c.execute('select id from sites order by name')
                      
            self.list_ctrl_sites.DeleteAllItems()   
            
            if update_cache:
                self.msites = []
             
            for row in c:
                site = MoodleSite(self.config,db_id=row[0])
                
                if site.favicon is not None:
                    idx = self.il.Add(wx.BitmapFromImage(wx.ImageFromStream(site.favicon)))                              
                    index = self.list_ctrl_sites.InsertImageStringItem(sys.maxint, site.name, idx)
                else:
                    idx = 0
                    index = self.list_ctrl_sites.InsertStringItem(sys.maxint, site.name)                        
                
                self.list_ctrl_sites.SetItemData(index, row[0])
                self.list_ctrl_sites.SetStringItem(index, 1, site.username)
                self.list_ctrl_sites.SetStringItem(index, 2, site.url) 
                
                if update_cache:                           
                    dsite = {}
                    dsite['name'] = site.name
                    dsite['db_id'] = row[0]
                    dsite['username'] = site.username
                    dsite['url'] = site.url
                    dsite['id_ico'] = idx
                    dsite['list_item_id'] = index
                    dsite['monitor'] = site.monitor
                    dsite['gatherer'] = site.gatherer
                    self.msites.append(dsite)    
                
            c.close()  
        
        self.list_ctrl_sites.SetColumnWidth(0, wx.LIST_AUTOSIZE)
        self.list_ctrl_sites.SetColumnWidth(1, wx.LIST_AUTOSIZE)
        self.list_ctrl_sites.SetColumnWidth(2, wx.LIST_AUTOSIZE)
        
    def RequireMasterPassword(self):
        if self.config.master_password == '':
            dlg = MasterPasswordDialog(self, -1)
            dlg.CenterOnScreen()
            dlg.button_3.SetDefault()
            
            val = dlg.ShowModal()                   
            
            if val == wx.ID_OK:
                enc = MEncrypter(dlg.text_ctrl_master_password.GetValue())
                e = enc.encrypt(u'12345678')
                if 'mpcheck' not in self.config.preferences:
                    self.config.preferences['mpcheck'] = e
                    self.config.save()
                    self.config.master_password = dlg.text_ctrl_master_password.GetValue()
                    return True
                elif self.config.preferences['mpcheck'] == e:
                    self.config.master_password = dlg.text_ctrl_master_password.GetValue()
                    return True
                else:
                    self.RequireMasterPassword()
                    
            else:
                self.Close()
                sys.exit()
                
    def DoLogin(self):
        index = self.list_ctrl_sites.GetFirstSelected()
        while index != -1:
            site_id = self.list_ctrl_sites.GetItemData(index)
            site = MoodleSite(self.config,db_id=site_id)
            site.do_login_browser()
            index = self.list_ctrl_sites.GetNextSelected(index)            
                    
    def OnButtonLoginClick(self, event): # wxGlade: MyMainFrame.<event_handler>
        self.DoLogin()

    def OnFilterEnter(self, event): # wxGlade: MyMainFrame.<event_handler>
        self.DoLogin()

    def OnFilterText(self, event): # wxGlade: MyMainFrame.<event_handler>        
             
        def filter_site(s):
            if self.text_ctrl_filter.GetValue() != '' and s['name'].lower().find(self.text_ctrl_filter.GetValue()) > -1:
                return True 
        
        self.PopulateList(filter(filter_site,self.msites))

    def OnEditSiteButtonClick(self, event): # wxGlade: MyMainFrame.<event_handler>
        index = self.list_ctrl_sites.GetFirstSelected()
        
        if index != -1:
            site_id = self.list_ctrl_sites.GetItemData(index)
            site = MoodleSite(self.config,db_id=site_id)    
                
            dlg = NewSiteDialog(self, -1)
            dlg.CenterOnScreen()
            dlg.button_save.SetDefault()
            
            dlg.text_ctrl_name.SetValue(site.name)    
            dlg.text_ctrl_url.SetValue(site.url)
            dlg.text_ctrl_username.SetValue(site.username)
            dlg.text_ctrl_password.SetValue(site.password)
            dlg.text_ctrl_notes.SetValue(site.notes)
            dlg.text_ctrl_wstoken.SetValue(site.wstoken)
            dlg.text_ctrl_wsusername.SetValue(site.wsusername)
            dlg.text_ctrl_wspassword.SetValue(site.wspassword)
            
            if site.gatherer == 1:
                dlg.checkbox_gatherer.SetValue(True)
            else:
                dlg.checkbox_gatherer.SetValue(False)
                
            if site.monitor == 1:
                dlg.checkbox_monitor.SetValue(True)
            else:
                dlg.checkbox_monitor.SetValue(False)
            
            val = dlg.ShowModal()
            
            if val == wx.ID_OK:
                site.name = dlg.text_ctrl_name.GetValue()
                site.url = dlg.text_ctrl_url.GetValue()
                site.username = dlg.text_ctrl_username.GetValue()
                site.password = dlg.text_ctrl_password.GetValue()
                site.notes = dlg.text_ctrl_notes.GetValue()
                site.wstoken = dlg.text_ctrl_wstoken.GetValue()
                site.wsusername = dlg.text_ctrl_wsusername.GetValue()
                site.wspassword = dlg.text_ctrl_wspassword.GetValue()
                
                if dlg.checkbox_monitor.GetValue() is True:
                    site.monitor = 1
                else:
                    site.monitor = 0
                    
                if dlg.checkbox_gatherer.GetValue() is True:
                    site.gatherer = 1
                else:
                    site.gatherer = 0
                    
                
                site.update()                  
                self.PopulateList(update_cache=1)

    def OnRemoveSiteButtonClick(self, event): # wxGlade: MyMainFrame.<event_handler>
        dlg = wx.MessageDialog(self, 'Are you sure you want to removed all sites selected?',
                               'Confirm removing site',
                               wx.YES_NO  | wx.ICON_EXCLAMATION                               
                               )
        val = dlg.ShowModal()
        if val == wx.ID_YES:
            index = self.list_ctrl_sites.GetFirstSelected()
            while index != -1:
                site_id = self.list_ctrl_sites.GetItemData(index)
                site = MoodleSite(self.config,db_id=site_id)
                site.delete()
                index = self.list_ctrl_sites.GetNextSelected(index)
            self.PopulateList()
               
        dlg.Destroy()

    def OnNewSiteMenuClick(self, event): # wxGlade: MyMainFrame.<event_handler>
        self.OpenNewSiteDialog()

    def OnExitMenuClick(self, event): # wxGlade: MyMainFrame.<event_handler>
        self.Close()

    def OnAboutMenuClick(self, event): # wxGlade: MyMainFrame.<event_handler>
        msg = "Author: Juan Leyva 2010\n\n" + \
              "Web: http://sites.google.com/site/mooconsole\n" + \
              "Blog: http://openlearningtech.blogspot.com\n" + \
              "Blog: http://moodle-es.blogspot.com\n"
              
        dlg = wx.MessageDialog(self, msg, "About",
                               wx.OK | wx.ICON_INFORMATION)
        dlg.SetFont(wx.Font(8, wx.NORMAL, wx.NORMAL, wx.NORMAL, False, "Verdana"))
        dlg.ShowModal()
        dlg.Destroy()
        
    def ChangeMP(self,notice=''):
        dlg = ChangeMasterPasswordDialog(self, -1)
        dlg.CenterOnScreen()
        dlg.button_change.SetDefault()
        
        if notice != '':
            dlg.label_notice.SetLabel(notice)
        
        val = dlg.ShowModal()
        
        if val == wx.ID_OK:      
            
            if len(dlg.text_ctrl_new.GetValue()) < 4:
                dlg.Destroy()
                self.ChangeMP('The new password must have at least 4 characters')
                return
            
            if dlg.text_ctrl_new.GetValue() != dlg.text_ctrl_repeat.GetValue():
                dlg.Destroy()
                self.ChangeMP('The new and repeat passwords does not match')
                return
                
            enc = MEncrypter(dlg.text_ctrl_current.GetValue())
            e = enc.encrypt(u'12345678')
            
            if self.config.preferences['mpcheck'] != e:
                dlg.Destroy()    
                self.ChangeMP('Wrong current password')
                return
            
            if dlg.text_ctrl_current.GetValue() != dlg.text_ctrl_new.GetValue():                
            
                con = sqlite3.connect(self.config.db_path)    
                c = con.cursor()
                c.execute('select id from sites order by name')
                site_list = c
                c.close()
                            
                for row in site_list:
                    site = MoodleSite(self.config,db_id=row[0])
                    site.update(dlg.text_ctrl_new.GetValue())
                                    
                                
                enc = MEncrypter(dlg.text_ctrl_new.GetValue())
                e = enc.encrypt(u'12345678')
                self.config.preferences['mpcheck'] = e
                self.config.save()
                self.config.master_password = dlg.text_ctrl_new.GetValue()
                    
                
        dlg.Destroy()    

    def OnChangeMPMenuClick(self, event): # wxGlade: MyMainFrame.<event_handler>
        self.ChangeMP()

    def OnPreferencesMenuClick(self, event): # wxGlade: MyMainFrame.<event_handler>
        dlg = PreferencesDialog(self, -1, 'Site Browser')
        dlg.CenterOnScreen()
        dlg.SetTitle('Preferences')   
        
        gatherer_list = [('Disabled','0'),('Every 1 hour','3600'),('Every 6 hours','21600'),('Every day','86400')]
        monitor_list = [('Disabled','0'),('Every 5 mins','300'),( 'Every 10 minutes','600'),( 'Every 15 minutes','900'),( 'Every 30 minutes','1800')]
        
        
        for name,val in gatherer_list:
            dlg.combo_box_info_gatherer.Append(name,val)
            print val, self.config.preferences['site_gatherer_time']            
            if int(self.config.preferences['site_gatherer_time']) == int(val):
                dlg.combo_box_info_gatherer.SetValue(name)
            
        for name,val in monitor_list:
            dlg.combo_box_url_monitor.Append(name,val)
            print val, self.config.preferences['url_monitor_time']
            if int(self.config.preferences['url_monitor_time']) == int(val):
                dlg.combo_box_url_monitor.SetValue(name)
                        
        if dlg.ShowModal() == wx.ID_OK:
            self.config.preferences['url_monitor_time'] = dlg.combo_box_url_monitor.GetClientData(dlg.combo_box_url_monitor.GetSelection())
            self.config.preferences['site_gatherer_time'] = dlg.combo_box_info_gatherer.GetClientData(dlg.combo_box_info_gatherer.GetSelection())
            
            self.config.save()
        
        dlg.Destroy()

    def OnWebsiteMenuClick(self, event): # wxGlade: MyMainFrame.<event_handler>
        webbrowser.open('http://sites.google.com/site/mooconsole')

    def OnSitesListSelected(self, event): # wxGlade: MyMainFrame.<event_handler>
        index = self.list_ctrl_sites.GetFirstSelected()
        
        if index != -1:
            site_id = self.list_ctrl_sites.GetItemData(index)
            site = MoodleSite(self.config,db_id=site_id)

            html_page = u'<html>\n'
            html_page += u'<body>\n'
            html_page += u'<p><b>'+site.name+'</b></p>\n'
            html_page += u'<p><b>URL</b>: '+site.url+'</p>\n'
            html_page += u'<p><b>Version</b>: '+str(site.site_info['release'])+' '+str(site.site_info['version'])+'</p>\n'
            html_page += u'<p><b>Notes</b>: '+site.notes+'</p>\n'
            html_page += u'<p><b>Courses</b>: '+str(site.site_info['courses'])+'</p>\n'
            html_page += u'<p><b>Users</b>: '+str(site.site_info['users'])+'</p>\n'
            html_page += u'<p><b>Assignments</b>: '+str(site.site_info['roleassignments'])+'</p>\n'
            html_page += u'<p><b>Updaters</b>: '+str(site.site_info['courseupdaters'])+'</p>\n'
            html_page += u'<p><b>Posts</b>: '+str(site.site_info['posts'])+'</p>\n'
            html_page += u'<p><b>Questions</b>: '+str(site.site_info['questions'])+'</p>\n'
            html_page += u'<p><b>Resources</b>: '+str(site.site_info['resources'])+'</p>\n'
            html_page += u'<p><b>Lang</b>: '+str(site.site_info['lang'])+'</p>\n'
            html_page += u'</body>\n'
            html_page += u'</html>\n'

            self.htmlwindow_info.SetPage(html_page)
        else:
            self.htmlwindow_info.SetPage(html_page)   
            
        
        if self.notebook_1.GetSelection() == 3:
            self.LoadSiteInfoReport()
            self.LoadURLMonitorReport()
            

    def OnButtonRefreshClick(self, event): # wxGlade: MyMainFrame.<event_handler>
        pass

    def OnOpenIDataButtonClick(self, event): # wxGlade: MyMainFrame.<event_handler>
        index = self.list_ctrl_sites.GetFirstSelected()
        
        if index != -1:
            ws_selected = {}
            if self.combo_box_ws.GetSelection() != 'Select':
                for ws in self.m_ws:            
                    if ws['wsfname'] == self.combo_box_ws.GetClientData(self.combo_box_ws.GetSelection()):
                        ws_selected = ws
                        break
                
                if len(ws_selected) > 0:
                    dlg = InputDataDialog(self, -1, 'Input data', size =(800,600))
                    dlg.CenterOnScreen()
                    
                    if self.grid_ws.GetNumberRows() > 0:
                        self.grid_ws.DeleteRows(0,self.grid_ws.GetNumberRows())
                        
                    if self.grid_ws.GetNumberCols() > 0:
                        self.grid_ws.DeleteCols(0,self.grid_ws.GetNumberCols())
                        
                    self.text_ctrl_ws_log.SetValue('')
                    self.current_ws_response = []
                                    
                    ws = MoodleWS(ws_selected)
                    dlg.LoadDataGrid(ws)
                                                 
                    if dlg.ShowModal() == wx.ID_OK:
                                                
                        cols_number = dlg.grid_data.GetNumberCols()
                        rows_number = dlg.grid_data.GetNumberRows()
                        
                        data = []

                        for row in range(0,rows_number):
                            row_data = []
                            for col in range(0,cols_number):
                                row_data.insert(col,dlg.grid_data.GetCellValue(row,col))
                            data.append(row_data)
                        
                        ws.set_data(data)
                        if ws.is_ready():
                            index = self.list_ctrl_sites.GetFirstSelected()
                            while index != -1:
                                site_id = self.list_ctrl_sites.GetItemData(index)
                                site = MoodleSite(self.config,db_id=site_id)                      
                                index = self.list_ctrl_sites.GetNextSelected(index)
                                result,data = ws.execute(site)
                                if result is not False:                                    
                                    self.ShowWSResponse(data,site)
                                else:
                                    if data is not None:
                                        self.text_ctrl_ws_log.AppendText(site.name+': '+data)
                                    else:
                                        self.text_ctrl_ws_log.AppendText(site.name+': ''Error calling webservice')
                            
                    dlg.Destroy()
        else:
            self.ShowMessage('Please, select a Moodle Site')

    
    def ShowWSResponse(self,data,site):
        cols_names, grid = data
        
        self.text_ctrl_ws_log.AppendText(site.name+': Success.')
        if len(cols_names) == 0 or len(grid) == 0:
            self.text_ctrl_ws_log.AppendText(' No items to show')
        else:            
            self.grid_ws.Enable()
            self.grid_ws.Show()
            
            if self.grid_ws.GetNumberCols() == 0:
                csv_cols = []
                self.grid_ws.InsertCols(0,1)
                self.grid_ws.SetColLabelValue(0,'Site')
                csv_cols.append('Site')
                for pos, col in enumerate(cols_names):
                    self.grid_ws.InsertCols(pos + 1,1)
                    self.grid_ws.SetColLabelValue(pos + 1,col)
                    csv_cols.append(col)
            
                self.current_ws_response.append(csv_cols)

            b_row = self.grid_ws.GetNumberRows()
            
            for r_number,row in enumerate(grid):
                csv_cols = []
                self.grid_ws.AppendRows(1)
                self.grid_ws.SetCellValue(b_row + r_number,0,site.name)
                csv_cols.append(site.name)
                for c_number, col in enumerate(row):
                    self.grid_ws.SetCellValue(b_row + r_number,c_number + 1,col)
                    csv_cols.append(col)
                
                self.current_ws_response.append(csv_cols)
    
    
    def OnComboWSSelected(self, event): # wxGlade: MyMainFrame.<event_handler>
        ws_selected = {}
        if self.combo_box_ws.GetSelection() != 'Select':
            for ws in self.m_ws:            
                if ws['wsfname'] == self.combo_box_ws.GetClientData(self.combo_box_ws.GetSelection()):
                    ws_selected = ws
                    break
            
            if len(ws_selected) > 0:
                ws = MoodleWS(ws_selected)
##                html_page = u"""        
##                <html>
##                    <body>
##                    <p><b>{0}</b></p>
##                    <p><b>{2}</b></p>
##                    <p><b>Description</b>: {2}</p>
##                    
##                </html>        
##                """
##                self.htmlwindow_info.SetPage(html_page.format(ws.wsfname,ws.name,ws.description))
                
    def OnMenuMoodleClick(self, event): # wxGlade: MyMainFrame.<event_handler>
        webbrowser.open('http://moodle.org')

    def OnSearchDocsMenuClick(self, event): # wxGlade: MyMainFrame.<event_handler>
        self.DoSearch()
        
    def DoSearch(self):
        dlg = wx.TextEntryDialog(
                self, 'Search in Moodle Docs',
                'Moodle Docs',)

        if dlg.ShowModal() == wx.ID_OK:
            webbrowser.open('http://docs.moodle.org/en/Special:Search?'+urlencode({'search': dlg.GetValue()})+'&fulltext=Search')

        dlg.Destroy()            

    def OnMoodleTrackerMenuClick(self, event): # wxGlade: MyMainFrame.<event_handler>
        webbrowser.open('http://tracker.moodle.org')

    def OnMenuXrefClick(self, event): # wxGlade: MyMainFrame.<event_handler>
        webbrowser.open('http://xref.moodle.org')

    def OnFileBrowserButtonClick(self, event): # wxGlade: MyMainFrame.<event_handler>
        index = self.list_ctrl_sites.GetFirstSelected()
        
        if index != -1:
            dlg = MoodleBrowserDialog(self, -1, 'Site Browser', size =(600,400))
            dlg.CenterOnScreen()
            
            site_id = self.list_ctrl_sites.GetItemData(index)
            
            site = MoodleSite(self.config,db_id=site_id)
            
            dlg.SetTitle('Browse Site')
            
            threading.Thread(target = dlg.PopulateBrowser, args = (site,self.config)).start()
            #dlg.PopulateBrowser(site,self.config)
            if dlg.ShowModal() == wx.ID_OK:
                self.upload_site = site
                self.upload_dir = dlg.file_browser.selected_dir
                self.upload_dir_name = dlg.file_browser.selected_dir_name
                self.text_ctrl_destination.SetValue(self.upload_dir_name)
                if self.list_ctrl_files.GetItemCount() > 0:
                    self.button_upload_files.Enable()
            
            dlg.Destroy()
        else:
            self.ShowMessage('Please, selecte a Moodle site')    

    def OnRemoveFileButtonClick(self, event): # wxGlade: MyMainFrame.<event_handler>
        index = self.list_ctrl_files.GetFirstSelected()
        while index != -1:
            self.list_ctrl_files.DeleteItem(index)
            index = self.list_ctrl_files.GetFirstSelected(index)
                
    def OnMenuSiteRefreshClick(self, event): # wxGlade: MyMainFrame.<event_handler>
        index = self.list_ctrl_sites.GetFirstSelected()
        while index != -1:
            site_id = self.list_ctrl_sites.GetItemData(index)
            site = MoodleSite(self.config,db_id=site_id)
            threading.Thread(target = site.get_info).start()
            index = self.list_ctrl_sites.GetNextSelected(index)

    def OnMenuSiteUpdateIconClick(self, event): # wxGlade: MyMainFrame.<event_handler>
        index = self.list_ctrl_sites.GetFirstSelected()
        while index != -1:
            site_id = self.list_ctrl_sites.GetItemData(index)
            site = MoodleSite(self.config,db_id=site_id)
            threading.Thread(target = site.get_favicon).start()
            index = self.list_ctrl_sites.GetNextSelected(index)

    def OnSitesListKeyDown(self, event): # wxGlade: MyMainFrame.<event_handler>
        self.DoLogin()
        
    def ShowMessage(self,msg,title='Alert'):
        dlg = wx.MessageDialog(self, msg, "Alert",
                               wx.OK | wx.ICON_INFORMATION)
        dlg.SetFont(wx.Font(8, wx.NORMAL, wx.NORMAL, wx.NORMAL, False, "Verdana"))
        dlg.ShowModal()
        dlg.Destroy()
        

    def OnAddFilesButtonClick(self, event): # wxGlade: MyMainFrame.<event_handler>
        dlg = wx.FileDialog(
            self, message="Choose files",
            defaultDir=os.getcwd(), 
            defaultFile="",
            style=wx.OPEN | wx.MULTIPLE | wx.CHANGE_DIR
            )
            
        if dlg.ShowModal() == wx.ID_OK:
            paths = dlg.GetPaths()
            for path in paths:
                head, tail = os.path.split(path)
                index = self.list_ctrl_files.InsertStringItem(sys.maxint, tail)
                #self.list_ctrl_files.SetItemData(index, path)
                self.list_ctrl_files.SetStringItem(index, 1, path)
            self.list_ctrl_files.SetColumnWidth(0, wx.LIST_AUTOSIZE)
            self.list_ctrl_files.SetColumnWidth(1, wx.LIST_AUTOSIZE)
            
            if self.upload_site is not None and self.upload_dir != '' and self.list_ctrl_files.GetItemCount() > 0:
                self.button_upload_files.Enable()
            self.button_upload_files.Enable()
        dlg.Destroy()  
        
    def UpdateUploadingList(self, item, status):
        
        self.upload_queue[item]['status'] = status
        item_index = self.upload_queue[item]['item_index']

        item = self.list_ctrl_uploading.GetItem(item_index)
        if status == 'uploading':
            item.SetTextColour(wx.BLUE)
            self.list_ctrl_uploading.SetStringItem(item_index, 1, 'Uploading')
        if status == 'failed':
            item.SetTextColour(wx.RED)
            self.list_ctrl_uploading.SetStringItem(item_index, 1, 'Failed')
        if status == 'uploaded':
            item.SetTextColour(wx.GREEN)
            self.list_ctrl_uploading.SetStringItem(item_index, 1, 'Uploaded')
        
        self.list_ctrl_uploading.SetItem(item)
        self.list_ctrl_uploading.SetColumnWidth(1, wx.LIST_AUTOSIZE)

    def OnUploadFilesButtonClick(self, event): # wxGlade: MyMainFrame.<event_handler>
        file_browser = mbrowser.MoodleFileBrowser(self.upload_site,self.config)
        index = self.list_ctrl_files.GetNextItem(-1)
        
        first = len(self.upload_queue)
        while index != -1:
            item = self.list_ctrl_files.GetItem(index,1)
            file_path = item.GetText()
            index = self.list_ctrl_files.GetNextItem(index)
            
            head, tail = os.path.split(file_path)
            
            upload_item = {}
            upload_item['site'] = self.upload_site
            upload_item['dir'] = self.upload_dir
            upload_item['file_path'] = file_path
            upload_item['status'] = 'pending'            
                        
            index_up = self.list_ctrl_uploading.InsertStringItem(len(self.upload_queue), tail)
            
            self.list_ctrl_uploading.SetItemData(index_up, len(self.upload_queue))
            self.list_ctrl_uploading.SetStringItem(index_up, 1, 'Pending')
            self.list_ctrl_uploading.SetStringItem(index_up, 2, self.upload_dir_name)
            self.list_ctrl_uploading.SetStringItem(index_up, 3, file_path)
            
            upload_item['item_index'] = index_up
            self.upload_queue.append(upload_item)
        
        
        self.list_ctrl_uploading.SetColumnWidth(0, wx.LIST_AUTOSIZE)
        self.list_ctrl_uploading.SetColumnWidth(1, wx.LIST_AUTOSIZE)
        self.list_ctrl_uploading.SetColumnWidth(2, wx.LIST_AUTOSIZE)
        self.list_ctrl_uploading.SetColumnWidth(3, wx.LIST_AUTOSIZE)
        
        last = len(self.upload_queue)
        
        uploader = mbrowser.FileUploaderThread(self.upload_queue,first,last,self.UpdateUploadingList)
        uploader.start()


        #self.upload_site = None
        #self.upload_dir = ''
        self.list_ctrl_files.DeleteAllItems()
        self.button_upload_files.Disable()

    def OnSaveSpreadsheetButtonClick(self, event): # wxGlade: MyMainFrame.<event_handler>
        wildcard = "Spreadsheet format (*.csv)|*.csv" 
        dlg = wx.FileDialog(
            self, message="Save file as ...", defaultDir=os.getcwd(), 
            defaultFile="", wildcard=wildcard, style=wx.SAVE
            )

        if dlg.ShowModal() == wx.ID_OK:
            path = dlg.GetPath()
            writer = csv.writer(open(path, "wb"))
            writer.writerows(self.current_ws_response)
        
        dlg.Destroy()
        
    def LoadSiteInfoReport(self):
        current_report = []
        report_header = []
        
        self.grid_report_information.ClearGrid()
        if self.grid_report_information.GetNumberRows() > 0:
            self.grid_report_information.DeleteRows(0,self.grid_report_information.GetNumberRows())
        
        index = self.list_ctrl_sites.GetFirstSelected()
        
        if index != -1:
            site_list = []
            while index != -1:
                site_id = self.list_ctrl_sites.GetItemData(index)
                site_list.append(str(site_id))
                index = self.list_ctrl_sites.GetNextSelected(index)
            
            con = sqlite3.connect(self.config.db_path)    
            def dict_factory(cursor, row):
                    d = {}
                    for idx, col in enumerate(cursor.description):
                        d[col[0]] = row[idx]
                    return d            
                
            con.row_factory = dict_factory
            c = con.cursor()

            c.execute('SELECT * FROM site_info WHERE siteid IN ('+string.join(site_list,',')+') ORDER BY DATE DESC')
            
            site_info = ['sitename','date','version','release','courses','users','roleassignments','courseupdaters','posts','questions','resources','lang']
            site_name_cache = {}            
            
            add_cols = False
            if self.grid_report_information.GetNumberCols() < len(site_info):
                add_cols = True
            
            for row_number,row in enumerate(c):
                c_row = []
                self.grid_report_information.AppendRows(1)
                
                if row['siteid'] not in site_name_cache:
                    s = MoodleSite(self.config,db_id=row['siteid'])
                    site_name_cache[row['siteid']] = s.name
                    row['sitename'] = s.name
                else:
                    row['sitename'] = site_name_cache[row['siteid']]
                
                for col_number,col_name in enumerate(site_info):
                    if row_number == 0:
                        if add_cols:
                            self.grid_report_information.InsertCols(col_number,1)
                            self.grid_report_information.SetColLabelValue(col_number,col_name)
                            report_header.append(col_name)                                      
                    
                    self.grid_report_information.SetCellValue(row_number,col_number,str(row[col_name]))
                    c_row.append(str(row[col_name]))
                    
                current_report.append(c_row)
            
            for i in range(0,self.grid_report_information.GetNumberCols()):
                self.grid_report_information.AutoSizeColumn(i)
                
            current_report.insert(0,report_header)
            self.current_report[0] = current_report
            
                
    def LoadURLMonitorReport(self):
        current_report = []
        report_header = []
        
        self.grid_report_monitor.ClearGrid()
        if self.grid_report_monitor.GetNumberRows() > 0:
            self.grid_report_monitor.DeleteRows(0,self.grid_report_monitor.GetNumberRows())
        
        index = self.list_ctrl_sites.GetFirstSelected()
        
        if index != -1:
            site_list = []
            while index != -1:
                site_id = self.list_ctrl_sites.GetItemData(index)
                site_list.append(str(site_id))
                index = self.list_ctrl_sites.GetNextSelected(index)
            
            con = sqlite3.connect(self.config.db_path)    
            def dict_factory(cursor, row):
                    d = {}
                    for idx, col in enumerate(cursor.description):
                        d[col[0]] = row[idx]
                    return d            
                
            con.row_factory = dict_factory
            c = con.cursor()

            c.execute('SELECT * FROM log WHERE component = "url_monitor" AND siteid IN ('+string.join(site_list,',')+') ORDER BY date DESC')
            
            site_info = ['sitename','date','info','data']
            site_name_cache = {}
                        
            add_cols = False
            if self.grid_report_monitor.GetNumberCols() < len(site_info):
                add_cols = True

            
            for row_number,row in enumerate(c):
                c_row = []
                self.grid_report_monitor.AppendRows(1)
                
                if row['siteid'] not in site_name_cache:
                    s = MoodleSite(self.config,db_id=row['siteid'])
                    site_name_cache[row['siteid']] = s.name
                    row['sitename'] = s.name
                else:
                    row['sitename'] = site_name_cache[row['siteid']]
                
                for col_number,col_name in enumerate(site_info):
                    if row_number == 0:
                        if add_cols:
                            self.grid_report_monitor.InsertCols(col_number,1)
                            self.grid_report_monitor.SetColLabelValue(col_number,col_name)
                            report_header.append(col_name)                                       
                    
                    self.grid_report_monitor.SetCellValue(row_number,col_number,str(row[col_name]))
                    
                    c_row.append(str(row[col_name]))
                    
                current_report.append(c_row)
            
            for i in range(0,self.grid_report_monitor.GetNumberCols()):
                self.grid_report_monitor.AutoSizeColumn(i) 
                
            current_report.insert(0,report_header)            
            self.current_report[1] = current_report

    def OnMainNoteBookChanged(self, event): # wxGlade: MyMainFrame.<event_handler>
        self.LoadSiteInfoReport()
        self.LoadURLMonitorReport()
        

    def OnSaveReportButtonClick(self, event): # wxGlade: MyMainFrame.<event_handler>
        wildcard = "Spreadsheet format (*.csv)|*.csv" 
        dlg = wx.FileDialog(
            self, message="Save file as ...", defaultDir=os.getcwd(), 
            defaultFile="", wildcard=wildcard, style=wx.SAVE
            )

        if dlg.ShowModal() == wx.ID_OK:
            path = dlg.GetPath()
            
            page = self.notebook_reports.GetSelection()
            
            if page in self.current_report:
                writer = csv.writer(open(path, "wb"))
                writer.writerows(self.current_report[page])
        
        dlg.Destroy()

# end of class MyMainFrame


class MyMainWindow(wx.App):
    def OnInit(self):
        wx.InitAllImageHandlers()
        frame_1 = MyMainFrame(None, -1, "")
        self.SetTopWindow(frame_1)
        frame_1.Show()
        return 1

# end of class MyMainWindow

if __name__ == "__main__":
    moohelper = MyMainWindow(0)
    moohelper.MainLoop()
